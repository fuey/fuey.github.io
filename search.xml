<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[博客搭建历程]]></title>
    <url>%2F2019%2F07%2F05%2Ffirststeps%2F</url>
    <content type="text"><![CDATA[折腾了差不多快一个星期了，总算把这个博客给鼓捣出来了，记录一下，帮助一下想要搭建的小伙伴！ 源起本来早就打算自己搭建个博客了，一来可以记录学习中遇到的各种问题，以防忘记；二来可以督促自己该学习了，别特么一天到晚就知道瞎扯淡，否则啥时候能买得起一套房，怎么对得起一直陪自己吃苦的女友；三来还可以打发空闲时间，岂不快哉！所以，也就有了这个博客的诞生。 选型虽然有了这个搭博客的想法，却一直纠结在博客页面布局上，我想要的是简洁，美观，高大上的类型，必须得自己搭建的博客。了解到现在的主流博客基本都是用Hexo、jekyll或者是express来搭建，或者借助于第三方的平台，比如CSDN，简书，头条等等。后来，偶然间在网上发现了一个博客，是用hexo+next搭建在github上的博客，满足了我的所有要求，简洁，炫酷，简直就是写博客的上选之作，于是，找了一些教程，说干就干… 详细步骤搭建git环境 点击这里download下载，然后next,next,next… hexo、next安装 打开Git Bash，全局安装hexo：npm install -g hexo 定位到想要创建博客的路径上，运行命令：hexo init，创建搭建hexo博客需要的文件 安装npm依赖包：npm install 从github上拉next到博客路径：git clone https://github.com/iissnan/hexo-theme-next themes/next 修改博客配置文件youbolg/_config.yml，找到 theme 字段，并将其值更改为 next，这样就把hexo的主题设置为next了 其他的基本设置请参考：next官方文档 优化主题 增加文章阅读时长，字数统计显示安装： npm i --save hexo-wordcount使用：搜索leancloud-visitors-count 放到下面:1234567891011121314151617 &lt;span class="post-time"&gt; &amp;nbsp; | &amp;nbsp; &lt;span class="post-meta-item-icon"&gt; &lt;i class="fa fa-calendar-o"&gt;&lt;/i&gt; &lt;/span&gt; &lt;span class="post-meta-item-text"&gt;字数统计:&lt;/span&gt; &lt;span class="post-count"&gt;&#123;&#123; wordcount(post.content) &#125;&#125;(字)&lt;/span&gt; &lt;/span&gt; &lt;span class="post-time"&gt; &amp;nbsp; | &amp;nbsp; &lt;span class="post-meta-item-icon"&gt; &lt;i class="fa fa-calendar-o"&gt;&lt;/i&gt; &lt;/span&gt; &lt;span class="post-meta-item-text"&gt;阅读时长:&lt;/span&gt; &lt;span class="post-count"&gt;&#123;&#123; min2read(post.content) &#125;&#125;(分)&lt;/span&gt; &lt;/span&gt;&lt;/span&gt; 部署github 登录github、创建repo(注意注册的名字必须和repo名字相同)参考链接：kezhenxue 获取并设置ssh key, 复制repo的https url复制到博客配置文件中：deploy: type: git repository: https://github.com/fuey/fuey.github.io.git branch: master 设置Git的username 和 email地址：git config --global user.name &quot;xuhaiyan&quot;、git config --global user.email &quot;haiyan.xu.vip@gmail.com&quot; 检查ssh key，创建ssh key，设置ssh key 在bash中，检查是否已经存在了SSH keys:ls -al ~/.ssh 如果存在，到C:\Users\用户名\.ssh路径下删除全部的文件 获取到ssh key：ssh-keygen -t rsa -C &quot;youemailaddress@**.com&quot;,然后到C:\Users\用户名\.ssh路径下看是否已经生成 生成的话直接执行：clip &lt; ~/.ssh/id_rsa.pub复制ssh key 然后到刚才创建的repo下，setting-&gt;SSH keys-&gt;add SSH key -&gt;填入title(随便填),key(直接Ctrl+v)。 测试配置是否正确:ssh -T git@github.com，输入yes，看到successful，那么恭喜你也有了一个炫酷的博客了！ 常用命令 hexo c #相当于 hexo clean 清除缓存hexo g #相当于 hexo generate 生成解析过后的博客代码hexo s #相当于 hexo server 本地服务hexo d #相当于 hexo deploy 部署到设置的github或者coding 参考链接next官方文档 | JORY’S BLOG | Hexo theme list | cnblogs]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>npm</tag>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[对2016年总结和感想]]></title>
    <url>%2F2019%2F07%2F05%2Fmy2016%2F</url>
    <content type="text"><![CDATA[时间过得真的很快，转眼间，自己已经毕业将近一年了。对了，顾着写博客貌似忘了自我介绍，博主来自贵州一个不太知名的小山村，12年考上了贵阳某二本院校，计算机科学与技术专业，虽然心有不甘，但还是撑到了毕业的那天。幸运的是在大学遇到了我的一生挚爱，也就是现在的女朋友，将来的伴侣，还有一群趣(chou)味相投的小伙伴,虽然毕业之后都各奔东西，但是总有相遇的那一天，然后一起干一番(da)事(mei)业(zi)…咳咳，扯远了，毕业之后，父母建议考公务员或者事业单位，混几年，娶个老婆、生个娃，然后安安稳稳过一生，说句实话，我也确实心动过，想想就觉得开心：每天蹲办公室，喝着茶，看着报纸，年复一年，日复一日，小生活就这么过着，多好…可是，博主是个装逼的人，我的人生不该这么过，就该过当上总经理，出任ceo，迎娶白富美这种丰富多彩的生活，所以，博主(知道自己考不上)毅然决定，留在贵阳，继续干码农。博主第一家公司在世纪城，回想起来，一把辛酸一把泪(苦逼脸)，单休，基本天天加班，真是干码农的标准配置，有时候凌晨一二点通过漆黑的街道也曾怀疑过人生，动摇过自己的初心，不过，年轻嘛，多经历点也不是什么坏事，博主也算是体验到了当码农的艰辛，由于公司是创业公司，其实这种情况也不奇怪，刚进公司那会儿，被叔(项目经理，咱公司都这么叫,习惯了)安排负责公司内部使用的管理系统的开发，看到项目架构，简直是一脸懵比，各种陌生的名词:dubbo、redis、druid、zookeeper、ecache…这都是些什么鬼，玩毛线，不过，老板给你开了工资，你敢不干？于是，就只能硬着头皮冲了，所幸的是，在做项目的过程中遇到了很多问题，问部门的同事，他们都很细心的给我讲，在这表示感谢(害羞…)。经过差不多半年的连滚带爬，自己确实学到了不少东西，平时工作除了干我后台的东西，也写过一些微信公众号的接口，并且喜欢上了这种只用写后台逻辑的感觉，就觉得，不用写jsp页面，真尼玛爽。时间在执行公司各种政策下快速流逝，转眼到了年末。公司举行了对博主来说很隆重的年会，大家都很开心！不过，世事无常，下一秒会发生啥，谁也说不准。差不多到过年的前几天的某一天，博主有点事，上完上午就请假了，大概在下午4，5点的时候陆续收到部门小伙伴发来的微信，qq，短信，甚至是电话说公司把研发部解散了，我开始还不太相信，觉得这群傻逼，骗谁呢，怎么可能嘛，研发在公司处于举足轻重的地位，怎么可能会解散，就当玩笑听过去了。博主6点左右回到家，老鹰(安卓扛把子)打电话来说，叫我过去吃顿散伙饭，说研发解散了，解散了，解散…我真的没有听错，确实说得是解散了，吃散伙饭。我一阵懵比，就想着过去见他们一面，问清楚到底发生了什么，我就请了一个下午，发生了这么大的事…上午还在的研发部，下午就不在了。后来，知道了，这仅仅只是公司的一个战略部署的一个部分而已，紧接着是裁员，100多号人的公司，差不多最后只剩一半不到！当时就觉得心里挺不是滋味的，好好的部门说没了就没了，辛辛苦苦一起做的项目就这么拱手让人了，心里真不爽。不过，那又有什么办法，自己只是一个小员工，根本不值得一提，想着，如果自己那时候技术和能力很牛逼，事情会不会发生一点点改变，偏向博主这边的一点点的改变，只能怪自己技术真的不行，无法达到那种程度，所以还得继续努力，不会让这种事再次发生在自己身上(叔，花姐，小龚，小明，小伟哥，小稍匕，小杜儿，潘潘，李洋，老鹰，安好，咱还会见面的….)。年后，经过小明的内推，进了一家外企，也就是现在呆的公司。博主要努力，努力，再努力，达到自己期望的高度。所以，今年搭了博客，开始了自己的规划，加油！故，共勉!]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git常用命令]]></title>
    <url>%2F2019%2F07%2F05%2Fgit%2FgitCmd%2F</url>
    <content type="text"><![CDATA[git常用命令 好不容易搭好的博客，前几次改了几个文件，差点GG，所以为了以防不测，故上传github，备份之! touch README.md 创建并添加一个名字为readme.md的文件 git init 初始化git仓库 git add README.MD 添加一个文件到本地仓库，用于之后的提交(只有在本地代码库里面的代码才能够提交到git的远程仓库上去) git add . 添加当前路径下的所有文件到本地仓库(注意那个.与add中间有一个空格) git commit -m &quot;notes&quot; 为本次提交加注释(即本次提交的代码主要简介) git remote add origin https://github.com/***/***.git 创建远程仓库，并为仓库命名,origin为仓库的别名(origin则设为默认主机)，用于将来引用,此处的url为git上事先创建好的url地址 git push -u origin master 本地的master分支推送到origin主机的master分支 git pull --rebase origin master 代码合并 git config --global --unset http.proxy （出现这个错误时：fatal: unable to access &#39;https://github.com/fuey/blog-code-backups.git/&#39;: Couldn&#39;t resolve host &#39;github.com&#39;，然后再提交就行了） 提交分支一般步骤 git add .、git commit -m &quot;notes&quot;、git remote add origin https://github.com/***/***.git、 git pull --rebase origin master、git push -u origin master，顺序执行即可]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第 2 章 计算机组成原理与体系结构]]></title>
    <url>%2F2017%2F04%2F18%2Fsoftwaretest%2F%E7%AC%AC%202%20%E7%AB%A0%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%2Ffirst%2F</url>
    <content type="text"><![CDATA[写在前面 提起软考，都是泪啊，这算是第三次考了，第一、二次考试都是在大学的时候考的，第一次下午题差３分，差点没把我气吐血，第二次由于没咋看书，简直惨不忍睹，刚毕业出来，学校的一些知识还没忘光，还是打算把这证给考了，爷就不信了．．．．话不多说，开始作死模式．．． 数据的表示进制转化 R进制转十进制：101001.010 -&gt; 12^5+12^3+1*2^-2 十进制转R进制：十进制数除以R，反向取余 二进制转八进制：从右边开始，每三位二进制位按照421乘以二进制数相加即可，比如，1011-&gt;11 22+1*1= 15 二进制转十六进制：从右边开始，每三位二进制位按照8421乘以二进制数相加即可，比如，101011 -&gt;2B码制 原码：把一个数转为二进制，并把最高位设为符号位，不足七位用0补全，即，1的原码为0000 0001，-1为1000 0001 反码：整数的原码与反码相同，负数的原码除符号位外，其他位按位取反，即，1的反码为0000 0001，-1为1111 1110 补码：整数的补码与反码相同，负数为反码+1,即，1的补码为0000 0001，-1为1111 1111 移码：补码的符号位取反，即，1的补码为1000 0001，-1为0111 1111，通常用来表示浮点数的阶码数值表示范围由于补码的+0和-0相同，所以比原码和反码多一位浮点数表示浮点数是指通过科学记数法表示的数，通常，表示为N=MR^e,则M为尾数，e为指数，R为基数浮点数之间的运算，通常要经过对阶-&gt;尾数计算-&gt;结果格式化的过程,对价时，通常由低向高对价，比如：2.3410^5 + 1.0410^6对阶后：0.23410^6 + 1.0410^6 = 1.27410^6其中，结果格式化表示尾数的第一位必须为不为零且之后必须为小数点(即不能为0.11或11.2)计算机结构硬件组成计算机由cpu（运算器，控制器）、存储器、输入设备、输出设备组成运算器：算术逻辑单元（ALU），累加寄存器（AC）、数据缓冲寄存器（DR）、状态条件寄存器（PSW）控制器：程序计数器（PC）、指令寄存器（IR）、指令译码器、时序部件计算机体系结构分类CISC和RISCCISC:复杂指令集计算机(提高效率)RISC:精简指令集计算机（提高性能）]]></content>
      <categories>
        <category>软考</category>
      </categories>
      <tags>
        <tag>软考</tag>
        <tag>计算机组成原理与体系结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[单节点Nginx环境搭建]]></title>
    <url>%2F2017%2F04%2F16%2Ftechnology%2Fnginx%2F%E5%8D%95%E8%8A%82%E7%82%B9nginx%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[上星期，由于工作需要，要搭建一个nginx服务器用于公司业务系统的反向代理，大概了解了一下，就动手搭建了一下，顺便出一个教程，方便新(zi)手(ji)查阅 一、安装Nginx 点击这里，下载安装最新版本Nginx,并解压安装包：tar -zxvf nginx-xxxx.tar.gz 安装Nginx编译必须的lib包，pcre、zlib和OpenSSL： yum -y install pcre-devel yum install openssl openssl-devel yum install -y zlib-devel 检查Nginx必须的lib是否已经有了：./configure --with-http_ssl_module，若出现以下内容则表示lib已经安装 定位到nginx目录，运行make命令进行编译，然后切换到root权限，到nginx目录执行make install命令进行安装 定位到安装路径下：/usr/local/nginx/sbin，运行命令./nginx，在浏览器中输入阿里云的host地址，如果出现下图类似内容，则安装成功 二、配置nginx配置文件 将证书和key放在/usr/local/nginx/conf目录下，下面备用 打开并下载路径/usr/local/nginx/conf下的nginx.conf文件： 1. 将worker_processes(允许生成的进程数)、worker_connections (最大连接数)设置大点 2. 配置代理服务器，在此均使用单节点的方式进行:123upstream myappServer&#123; server localhost:8001;&#125; 以此类推，配置多个系统 3. 配置server模块： 1234567891011client_max_body_size 500M; --上传文件限制大小listen 80 default backlog=2048; --监听端口listen 443 ssl; --ssl加密传输接口server_name localhost; ssl_certificate /usr/local/nginx/conf/server.crt; --ssl证书ssl_certificate_key /usr/local/nginx/conf/server.key; --ssl keyproxy_set_header Host $host; --主域名proxy_set_header X-Real-IP $remote_addr; --真实地址proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;proxy_set_header X-Forwarded-Proto $scheme; 4. 匹配规则： 123location /myapp/ &#123; --匹配规则为*/mychs/*的地址请求 proxy_pass http://mychsServer/myapp/; -- mychsServer对应上面的myServer&#125; 保存，定位到sbin目录下,运行命令./nginx -s reload即可重新加载nginx配置文件 常用命令：启动 Nginx：sudo ./sbin/nginx停止 Nginx：sudo ./sbin/nginx -s stop或sudo ./sbin/nginx -s quitNginx 重载配置: sudo ./sbin/nginx -s reload查看配置文件是否正确: ./sbin/nginx –t强制停止: pkill -9 nginx]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
</search>
